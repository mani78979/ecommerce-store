// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User profile
  profile   UserProfile?
  
  // User relationships
  orders    Order[]
  reviews   Review[]
  cart      CartItem[]
  wishlist  WishlistItem[]

  @@map("users")
}

model UserProfile {
  id      String  @id @default(cuid()) @map("_id")
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  
  // Address information
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profiles")
}

model Category {
  id          String    @id @default(cuid()) @map("_id")
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  slug        String   @unique
  description String?
  price       Float
  comparePrice Float?
  sku         String?  @unique
  
  // Inventory
  stock       Int      @default(0)
  lowStock    Int      @default(10)
  
  // Product status
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Images
  images      ProductImage[]
  
  // Relationships
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  // Product variants
  variants    ProductVariant[]
  
  // Reviews and ratings
  reviews     Review[]
  
  // Cart and wishlist
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  
  // Order items
  orderItems    OrderItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid()) @map("_id")
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  url       String
  altText   String?
  order     Int     @default(0)
  
  createdAt DateTime @default(now())

  @@map("product_images")
}

model ProductVariant {
  id        String  @id @default(cuid()) @map("_id")
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  name      String  // e.g., "Size", "Color"
  value     String  // e.g., "Large", "Red"
  price     Float?
  stock     Int?
  sku       String?
  
  // Order items that selected this variant
  orderItems OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name, value])
  @@map("product_variants")
}

model Review {
  id        String  @id @default(cuid()) @map("_id")
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  rating    Int     // 1-5 stars
  title     String?
  comment   String?
  
  isVerified Boolean @default(false) // Verified purchase
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId]) // One review per user per product
  @@map("reviews")
}

model CartItem {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity  Int     @default(1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id          String      @id @default(cuid()) @map("_id")
  orderNumber String      @unique @default(cuid())
  
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  
  status      OrderStatus @default(PENDING)
  
  // Totals
  subtotal    Float
  taxAmount   Float       @default(0)
  shippingAmount Float    @default(0)
  discountAmount Float    @default(0)
  total       Float
  
  // Shipping address
  shippingAddress Json?
  
  // Billing address
  billingAddress  Json?
  
  // Payment
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  paidAt          DateTime?
  
  // Shipping
  shippingMethod  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Order items
  items       OrderItem[]
  
  // Order notes
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid()) @map("_id")
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  
  quantity  Int
  price     Float // Price at time of order
  
  createdAt DateTime @default(now())

  @@map("order_items")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}